/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-20")
public class Calculadora {

  public interface Iface {

    public Resultado Sumar(double numeroUno, double numeroDos) throws org.apache.thrift.TException;

    public Resultado Restar(double numeroUno, double numeroDos) throws org.apache.thrift.TException;

    public Resultado Multiplicar(double numeroUno, double numeroDos) throws org.apache.thrift.TException;

    public Resultado Dividir(double numeroUno, double numeroDos) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Sumar(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException;

    public void Restar(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException;

    public void Multiplicar(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException;

    public void Dividir(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Resultado Sumar(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      send_Sumar(numeroUno, numeroDos);
      return recv_Sumar();
    }

    public void send_Sumar(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      Sumar_args args = new Sumar_args();
      args.setNumeroUno(numeroUno);
      args.setNumeroDos(numeroDos);
      sendBase("Sumar", args);
    }

    public Resultado recv_Sumar() throws org.apache.thrift.TException
    {
      Sumar_result result = new Sumar_result();
      receiveBase(result, "Sumar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Sumar failed: unknown result");
    }

    public Resultado Restar(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      send_Restar(numeroUno, numeroDos);
      return recv_Restar();
    }

    public void send_Restar(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      Restar_args args = new Restar_args();
      args.setNumeroUno(numeroUno);
      args.setNumeroDos(numeroDos);
      sendBase("Restar", args);
    }

    public Resultado recv_Restar() throws org.apache.thrift.TException
    {
      Restar_result result = new Restar_result();
      receiveBase(result, "Restar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Restar failed: unknown result");
    }

    public Resultado Multiplicar(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      send_Multiplicar(numeroUno, numeroDos);
      return recv_Multiplicar();
    }

    public void send_Multiplicar(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      Multiplicar_args args = new Multiplicar_args();
      args.setNumeroUno(numeroUno);
      args.setNumeroDos(numeroDos);
      sendBase("Multiplicar", args);
    }

    public Resultado recv_Multiplicar() throws org.apache.thrift.TException
    {
      Multiplicar_result result = new Multiplicar_result();
      receiveBase(result, "Multiplicar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Multiplicar failed: unknown result");
    }

    public Resultado Dividir(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      send_Dividir(numeroUno, numeroDos);
      return recv_Dividir();
    }

    public void send_Dividir(double numeroUno, double numeroDos) throws org.apache.thrift.TException
    {
      Dividir_args args = new Dividir_args();
      args.setNumeroUno(numeroUno);
      args.setNumeroDos(numeroDos);
      sendBase("Dividir", args);
    }

    public Resultado recv_Dividir() throws org.apache.thrift.TException
    {
      Dividir_result result = new Dividir_result();
      receiveBase(result, "Dividir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Dividir failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Sumar(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Sumar_call method_call = new Sumar_call(numeroUno, numeroDos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Sumar_call extends org.apache.thrift.async.TAsyncMethodCall<Resultado> {
      private double numeroUno;
      private double numeroDos;
      public Sumar_call(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numeroUno = numeroUno;
        this.numeroDos = numeroDos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Sumar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Sumar_args args = new Sumar_args();
        args.setNumeroUno(numeroUno);
        args.setNumeroDos(numeroDos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Resultado getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Sumar();
      }
    }

    public void Restar(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Restar_call method_call = new Restar_call(numeroUno, numeroDos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Restar_call extends org.apache.thrift.async.TAsyncMethodCall<Resultado> {
      private double numeroUno;
      private double numeroDos;
      public Restar_call(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numeroUno = numeroUno;
        this.numeroDos = numeroDos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Restar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Restar_args args = new Restar_args();
        args.setNumeroUno(numeroUno);
        args.setNumeroDos(numeroDos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Resultado getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Restar();
      }
    }

    public void Multiplicar(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Multiplicar_call method_call = new Multiplicar_call(numeroUno, numeroDos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Multiplicar_call extends org.apache.thrift.async.TAsyncMethodCall<Resultado> {
      private double numeroUno;
      private double numeroDos;
      public Multiplicar_call(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numeroUno = numeroUno;
        this.numeroDos = numeroDos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Multiplicar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Multiplicar_args args = new Multiplicar_args();
        args.setNumeroUno(numeroUno);
        args.setNumeroDos(numeroDos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Resultado getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Multiplicar();
      }
    }

    public void Dividir(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Dividir_call method_call = new Dividir_call(numeroUno, numeroDos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Dividir_call extends org.apache.thrift.async.TAsyncMethodCall<Resultado> {
      private double numeroUno;
      private double numeroDos;
      public Dividir_call(double numeroUno, double numeroDos, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numeroUno = numeroUno;
        this.numeroDos = numeroDos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Dividir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Dividir_args args = new Dividir_args();
        args.setNumeroUno(numeroUno);
        args.setNumeroDos(numeroDos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Resultado getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Dividir();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Sumar", new Sumar());
      processMap.put("Restar", new Restar());
      processMap.put("Multiplicar", new Multiplicar());
      processMap.put("Dividir", new Dividir());
      return processMap;
    }

    public static class Sumar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Sumar_args> {
      public Sumar() {
        super("Sumar");
      }

      public Sumar_args getEmptyArgsInstance() {
        return new Sumar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Sumar_result getResult(I iface, Sumar_args args) throws org.apache.thrift.TException {
        Sumar_result result = new Sumar_result();
        result.success = iface.Sumar(args.numeroUno, args.numeroDos);
        return result;
      }
    }

    public static class Restar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Restar_args> {
      public Restar() {
        super("Restar");
      }

      public Restar_args getEmptyArgsInstance() {
        return new Restar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Restar_result getResult(I iface, Restar_args args) throws org.apache.thrift.TException {
        Restar_result result = new Restar_result();
        result.success = iface.Restar(args.numeroUno, args.numeroDos);
        return result;
      }
    }

    public static class Multiplicar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Multiplicar_args> {
      public Multiplicar() {
        super("Multiplicar");
      }

      public Multiplicar_args getEmptyArgsInstance() {
        return new Multiplicar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Multiplicar_result getResult(I iface, Multiplicar_args args) throws org.apache.thrift.TException {
        Multiplicar_result result = new Multiplicar_result();
        result.success = iface.Multiplicar(args.numeroUno, args.numeroDos);
        return result;
      }
    }

    public static class Dividir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Dividir_args> {
      public Dividir() {
        super("Dividir");
      }

      public Dividir_args getEmptyArgsInstance() {
        return new Dividir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Dividir_result getResult(I iface, Dividir_args args) throws org.apache.thrift.TException {
        Dividir_result result = new Dividir_result();
        result.success = iface.Dividir(args.numeroUno, args.numeroDos);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Sumar", new Sumar());
      processMap.put("Restar", new Restar());
      processMap.put("Multiplicar", new Multiplicar());
      processMap.put("Dividir", new Dividir());
      return processMap;
    }

    public static class Sumar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Sumar_args, Resultado> {
      public Sumar() {
        super("Sumar");
      }

      public Sumar_args getEmptyArgsInstance() {
        return new Sumar_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Resultado> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Resultado>() { 
          public void onComplete(Resultado o) {
            Sumar_result result = new Sumar_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Sumar_result result = new Sumar_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Sumar_args args, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
        iface.Sumar(args.numeroUno, args.numeroDos,resultHandler);
      }
    }

    public static class Restar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Restar_args, Resultado> {
      public Restar() {
        super("Restar");
      }

      public Restar_args getEmptyArgsInstance() {
        return new Restar_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Resultado> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Resultado>() { 
          public void onComplete(Resultado o) {
            Restar_result result = new Restar_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Restar_result result = new Restar_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Restar_args args, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
        iface.Restar(args.numeroUno, args.numeroDos,resultHandler);
      }
    }

    public static class Multiplicar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Multiplicar_args, Resultado> {
      public Multiplicar() {
        super("Multiplicar");
      }

      public Multiplicar_args getEmptyArgsInstance() {
        return new Multiplicar_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Resultado> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Resultado>() { 
          public void onComplete(Resultado o) {
            Multiplicar_result result = new Multiplicar_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Multiplicar_result result = new Multiplicar_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Multiplicar_args args, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
        iface.Multiplicar(args.numeroUno, args.numeroDos,resultHandler);
      }
    }

    public static class Dividir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Dividir_args, Resultado> {
      public Dividir() {
        super("Dividir");
      }

      public Dividir_args getEmptyArgsInstance() {
        return new Dividir_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Resultado> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Resultado>() { 
          public void onComplete(Resultado o) {
            Dividir_result result = new Dividir_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Dividir_result result = new Dividir_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Dividir_args args, org.apache.thrift.async.AsyncMethodCallback<Resultado> resultHandler) throws org.apache.thrift.TException {
        iface.Dividir(args.numeroUno, args.numeroDos,resultHandler);
      }
    }

  }

  public static class Sumar_args implements org.apache.thrift.TBase<Sumar_args, Sumar_args._Fields>, java.io.Serializable, Cloneable, Comparable<Sumar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sumar_args");

    private static final org.apache.thrift.protocol.TField NUMERO_UNO_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroUno", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField NUMERO_DOS_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroDos", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Sumar_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Sumar_argsTupleSchemeFactory();

    public double numeroUno; // required
    public double numeroDos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMERO_UNO((short)1, "numeroUno"),
      NUMERO_DOS((short)2, "numeroDos");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMERO_UNO
            return NUMERO_UNO;
          case 2: // NUMERO_DOS
            return NUMERO_DOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMEROUNO_ISSET_ID = 0;
    private static final int __NUMERODOS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMERO_UNO, new org.apache.thrift.meta_data.FieldMetaData("numeroUno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NUMERO_DOS, new org.apache.thrift.meta_data.FieldMetaData("numeroDos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sumar_args.class, metaDataMap);
    }

    public Sumar_args() {
    }

    public Sumar_args(
      double numeroUno,
      double numeroDos)
    {
      this();
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Sumar_args(Sumar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numeroUno = other.numeroUno;
      this.numeroDos = other.numeroDos;
    }

    public Sumar_args deepCopy() {
      return new Sumar_args(this);
    }

    @Override
    public void clear() {
      setNumeroUnoIsSet(false);
      this.numeroUno = 0.0;
      setNumeroDosIsSet(false);
      this.numeroDos = 0.0;
    }

    public double getNumeroUno() {
      return this.numeroUno;
    }

    public Sumar_args setNumeroUno(double numeroUno) {
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      return this;
    }

    public void unsetNumeroUno() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    /** Returns true if field numeroUno is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroUno() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    public void setNumeroUnoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMEROUNO_ISSET_ID, value);
    }

    public double getNumeroDos() {
      return this.numeroDos;
    }

    public Sumar_args setNumeroDos(double numeroDos) {
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
      return this;
    }

    public void unsetNumeroDos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    /** Returns true if field numeroDos is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroDos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    public void setNumeroDosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMERODOS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NUMERO_UNO:
        if (value == null) {
          unsetNumeroUno();
        } else {
          setNumeroUno((java.lang.Double)value);
        }
        break;

      case NUMERO_DOS:
        if (value == null) {
          unsetNumeroDos();
        } else {
          setNumeroDos((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMERO_UNO:
        return getNumeroUno();

      case NUMERO_DOS:
        return getNumeroDos();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NUMERO_UNO:
        return isSetNumeroUno();
      case NUMERO_DOS:
        return isSetNumeroDos();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Sumar_args)
        return this.equals((Sumar_args)that);
      return false;
    }

    public boolean equals(Sumar_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_numeroUno = true;
      boolean that_present_numeroUno = true;
      if (this_present_numeroUno || that_present_numeroUno) {
        if (!(this_present_numeroUno && that_present_numeroUno))
          return false;
        if (this.numeroUno != that.numeroUno)
          return false;
      }

      boolean this_present_numeroDos = true;
      boolean that_present_numeroDos = true;
      if (this_present_numeroDos || that_present_numeroDos) {
        if (!(this_present_numeroDos && that_present_numeroDos))
          return false;
        if (this.numeroDos != that.numeroDos)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroUno);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroDos);

      return hashCode;
    }

    @Override
    public int compareTo(Sumar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNumeroUno()).compareTo(other.isSetNumeroUno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroUno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroUno, other.numeroUno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumeroDos()).compareTo(other.isSetNumeroDos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroDos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroDos, other.numeroDos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Sumar_args(");
      boolean first = true;

      sb.append("numeroUno:");
      sb.append(this.numeroUno);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numeroDos:");
      sb.append(this.numeroDos);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Sumar_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sumar_argsStandardScheme getScheme() {
        return new Sumar_argsStandardScheme();
      }
    }

    private static class Sumar_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sumar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Sumar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMERO_UNO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroUno = iprot.readDouble();
                struct.setNumeroUnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMERO_DOS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroDos = iprot.readDouble();
                struct.setNumeroDosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Sumar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMERO_UNO_FIELD_DESC);
        oprot.writeDouble(struct.numeroUno);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMERO_DOS_FIELD_DESC);
        oprot.writeDouble(struct.numeroDos);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Sumar_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sumar_argsTupleScheme getScheme() {
        return new Sumar_argsTupleScheme();
      }
    }

    private static class Sumar_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sumar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Sumar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumeroUno()) {
          optionals.set(0);
        }
        if (struct.isSetNumeroDos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumeroUno()) {
          oprot.writeDouble(struct.numeroUno);
        }
        if (struct.isSetNumeroDos()) {
          oprot.writeDouble(struct.numeroDos);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Sumar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.numeroUno = iprot.readDouble();
          struct.setNumeroUnoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numeroDos = iprot.readDouble();
          struct.setNumeroDosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Sumar_result implements org.apache.thrift.TBase<Sumar_result, Sumar_result._Fields>, java.io.Serializable, Cloneable, Comparable<Sumar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sumar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Sumar_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Sumar_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Resultado success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Resultado.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sumar_result.class, metaDataMap);
    }

    public Sumar_result() {
    }

    public Sumar_result(
      Resultado success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Sumar_result(Sumar_result other) {
      if (other.isSetSuccess()) {
        this.success = new Resultado(other.success);
      }
    }

    public Sumar_result deepCopy() {
      return new Sumar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Resultado getSuccess() {
      return this.success;
    }

    public Sumar_result setSuccess(@org.apache.thrift.annotation.Nullable Resultado success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Resultado)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Sumar_result)
        return this.equals((Sumar_result)that);
      return false;
    }

    public boolean equals(Sumar_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Sumar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Sumar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Sumar_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sumar_resultStandardScheme getScheme() {
        return new Sumar_resultStandardScheme();
      }
    }

    private static class Sumar_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sumar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Sumar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Resultado();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Sumar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Sumar_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sumar_resultTupleScheme getScheme() {
        return new Sumar_resultTupleScheme();
      }
    }

    private static class Sumar_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sumar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Sumar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Sumar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Resultado();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Restar_args implements org.apache.thrift.TBase<Restar_args, Restar_args._Fields>, java.io.Serializable, Cloneable, Comparable<Restar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Restar_args");

    private static final org.apache.thrift.protocol.TField NUMERO_UNO_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroUno", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField NUMERO_DOS_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroDos", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Restar_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Restar_argsTupleSchemeFactory();

    public double numeroUno; // required
    public double numeroDos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMERO_UNO((short)1, "numeroUno"),
      NUMERO_DOS((short)2, "numeroDos");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMERO_UNO
            return NUMERO_UNO;
          case 2: // NUMERO_DOS
            return NUMERO_DOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMEROUNO_ISSET_ID = 0;
    private static final int __NUMERODOS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMERO_UNO, new org.apache.thrift.meta_data.FieldMetaData("numeroUno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NUMERO_DOS, new org.apache.thrift.meta_data.FieldMetaData("numeroDos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Restar_args.class, metaDataMap);
    }

    public Restar_args() {
    }

    public Restar_args(
      double numeroUno,
      double numeroDos)
    {
      this();
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Restar_args(Restar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numeroUno = other.numeroUno;
      this.numeroDos = other.numeroDos;
    }

    public Restar_args deepCopy() {
      return new Restar_args(this);
    }

    @Override
    public void clear() {
      setNumeroUnoIsSet(false);
      this.numeroUno = 0.0;
      setNumeroDosIsSet(false);
      this.numeroDos = 0.0;
    }

    public double getNumeroUno() {
      return this.numeroUno;
    }

    public Restar_args setNumeroUno(double numeroUno) {
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      return this;
    }

    public void unsetNumeroUno() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    /** Returns true if field numeroUno is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroUno() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    public void setNumeroUnoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMEROUNO_ISSET_ID, value);
    }

    public double getNumeroDos() {
      return this.numeroDos;
    }

    public Restar_args setNumeroDos(double numeroDos) {
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
      return this;
    }

    public void unsetNumeroDos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    /** Returns true if field numeroDos is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroDos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    public void setNumeroDosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMERODOS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NUMERO_UNO:
        if (value == null) {
          unsetNumeroUno();
        } else {
          setNumeroUno((java.lang.Double)value);
        }
        break;

      case NUMERO_DOS:
        if (value == null) {
          unsetNumeroDos();
        } else {
          setNumeroDos((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMERO_UNO:
        return getNumeroUno();

      case NUMERO_DOS:
        return getNumeroDos();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NUMERO_UNO:
        return isSetNumeroUno();
      case NUMERO_DOS:
        return isSetNumeroDos();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Restar_args)
        return this.equals((Restar_args)that);
      return false;
    }

    public boolean equals(Restar_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_numeroUno = true;
      boolean that_present_numeroUno = true;
      if (this_present_numeroUno || that_present_numeroUno) {
        if (!(this_present_numeroUno && that_present_numeroUno))
          return false;
        if (this.numeroUno != that.numeroUno)
          return false;
      }

      boolean this_present_numeroDos = true;
      boolean that_present_numeroDos = true;
      if (this_present_numeroDos || that_present_numeroDos) {
        if (!(this_present_numeroDos && that_present_numeroDos))
          return false;
        if (this.numeroDos != that.numeroDos)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroUno);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroDos);

      return hashCode;
    }

    @Override
    public int compareTo(Restar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNumeroUno()).compareTo(other.isSetNumeroUno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroUno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroUno, other.numeroUno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumeroDos()).compareTo(other.isSetNumeroDos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroDos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroDos, other.numeroDos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Restar_args(");
      boolean first = true;

      sb.append("numeroUno:");
      sb.append(this.numeroUno);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numeroDos:");
      sb.append(this.numeroDos);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Restar_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Restar_argsStandardScheme getScheme() {
        return new Restar_argsStandardScheme();
      }
    }

    private static class Restar_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Restar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Restar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMERO_UNO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroUno = iprot.readDouble();
                struct.setNumeroUnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMERO_DOS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroDos = iprot.readDouble();
                struct.setNumeroDosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Restar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMERO_UNO_FIELD_DESC);
        oprot.writeDouble(struct.numeroUno);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMERO_DOS_FIELD_DESC);
        oprot.writeDouble(struct.numeroDos);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Restar_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Restar_argsTupleScheme getScheme() {
        return new Restar_argsTupleScheme();
      }
    }

    private static class Restar_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Restar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Restar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumeroUno()) {
          optionals.set(0);
        }
        if (struct.isSetNumeroDos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumeroUno()) {
          oprot.writeDouble(struct.numeroUno);
        }
        if (struct.isSetNumeroDos()) {
          oprot.writeDouble(struct.numeroDos);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Restar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.numeroUno = iprot.readDouble();
          struct.setNumeroUnoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numeroDos = iprot.readDouble();
          struct.setNumeroDosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Restar_result implements org.apache.thrift.TBase<Restar_result, Restar_result._Fields>, java.io.Serializable, Cloneable, Comparable<Restar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Restar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Restar_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Restar_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Resultado success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Resultado.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Restar_result.class, metaDataMap);
    }

    public Restar_result() {
    }

    public Restar_result(
      Resultado success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Restar_result(Restar_result other) {
      if (other.isSetSuccess()) {
        this.success = new Resultado(other.success);
      }
    }

    public Restar_result deepCopy() {
      return new Restar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Resultado getSuccess() {
      return this.success;
    }

    public Restar_result setSuccess(@org.apache.thrift.annotation.Nullable Resultado success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Resultado)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Restar_result)
        return this.equals((Restar_result)that);
      return false;
    }

    public boolean equals(Restar_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Restar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Restar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Restar_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Restar_resultStandardScheme getScheme() {
        return new Restar_resultStandardScheme();
      }
    }

    private static class Restar_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Restar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Restar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Resultado();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Restar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Restar_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Restar_resultTupleScheme getScheme() {
        return new Restar_resultTupleScheme();
      }
    }

    private static class Restar_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Restar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Restar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Restar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Resultado();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Multiplicar_args implements org.apache.thrift.TBase<Multiplicar_args, Multiplicar_args._Fields>, java.io.Serializable, Cloneable, Comparable<Multiplicar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Multiplicar_args");

    private static final org.apache.thrift.protocol.TField NUMERO_UNO_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroUno", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField NUMERO_DOS_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroDos", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Multiplicar_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Multiplicar_argsTupleSchemeFactory();

    public double numeroUno; // required
    public double numeroDos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMERO_UNO((short)1, "numeroUno"),
      NUMERO_DOS((short)2, "numeroDos");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMERO_UNO
            return NUMERO_UNO;
          case 2: // NUMERO_DOS
            return NUMERO_DOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMEROUNO_ISSET_ID = 0;
    private static final int __NUMERODOS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMERO_UNO, new org.apache.thrift.meta_data.FieldMetaData("numeroUno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NUMERO_DOS, new org.apache.thrift.meta_data.FieldMetaData("numeroDos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Multiplicar_args.class, metaDataMap);
    }

    public Multiplicar_args() {
    }

    public Multiplicar_args(
      double numeroUno,
      double numeroDos)
    {
      this();
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Multiplicar_args(Multiplicar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numeroUno = other.numeroUno;
      this.numeroDos = other.numeroDos;
    }

    public Multiplicar_args deepCopy() {
      return new Multiplicar_args(this);
    }

    @Override
    public void clear() {
      setNumeroUnoIsSet(false);
      this.numeroUno = 0.0;
      setNumeroDosIsSet(false);
      this.numeroDos = 0.0;
    }

    public double getNumeroUno() {
      return this.numeroUno;
    }

    public Multiplicar_args setNumeroUno(double numeroUno) {
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      return this;
    }

    public void unsetNumeroUno() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    /** Returns true if field numeroUno is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroUno() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    public void setNumeroUnoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMEROUNO_ISSET_ID, value);
    }

    public double getNumeroDos() {
      return this.numeroDos;
    }

    public Multiplicar_args setNumeroDos(double numeroDos) {
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
      return this;
    }

    public void unsetNumeroDos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    /** Returns true if field numeroDos is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroDos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    public void setNumeroDosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMERODOS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NUMERO_UNO:
        if (value == null) {
          unsetNumeroUno();
        } else {
          setNumeroUno((java.lang.Double)value);
        }
        break;

      case NUMERO_DOS:
        if (value == null) {
          unsetNumeroDos();
        } else {
          setNumeroDos((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMERO_UNO:
        return getNumeroUno();

      case NUMERO_DOS:
        return getNumeroDos();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NUMERO_UNO:
        return isSetNumeroUno();
      case NUMERO_DOS:
        return isSetNumeroDos();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Multiplicar_args)
        return this.equals((Multiplicar_args)that);
      return false;
    }

    public boolean equals(Multiplicar_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_numeroUno = true;
      boolean that_present_numeroUno = true;
      if (this_present_numeroUno || that_present_numeroUno) {
        if (!(this_present_numeroUno && that_present_numeroUno))
          return false;
        if (this.numeroUno != that.numeroUno)
          return false;
      }

      boolean this_present_numeroDos = true;
      boolean that_present_numeroDos = true;
      if (this_present_numeroDos || that_present_numeroDos) {
        if (!(this_present_numeroDos && that_present_numeroDos))
          return false;
        if (this.numeroDos != that.numeroDos)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroUno);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroDos);

      return hashCode;
    }

    @Override
    public int compareTo(Multiplicar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNumeroUno()).compareTo(other.isSetNumeroUno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroUno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroUno, other.numeroUno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumeroDos()).compareTo(other.isSetNumeroDos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroDos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroDos, other.numeroDos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Multiplicar_args(");
      boolean first = true;

      sb.append("numeroUno:");
      sb.append(this.numeroUno);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numeroDos:");
      sb.append(this.numeroDos);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Multiplicar_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiplicar_argsStandardScheme getScheme() {
        return new Multiplicar_argsStandardScheme();
      }
    }

    private static class Multiplicar_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Multiplicar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Multiplicar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMERO_UNO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroUno = iprot.readDouble();
                struct.setNumeroUnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMERO_DOS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroDos = iprot.readDouble();
                struct.setNumeroDosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Multiplicar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMERO_UNO_FIELD_DESC);
        oprot.writeDouble(struct.numeroUno);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMERO_DOS_FIELD_DESC);
        oprot.writeDouble(struct.numeroDos);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Multiplicar_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiplicar_argsTupleScheme getScheme() {
        return new Multiplicar_argsTupleScheme();
      }
    }

    private static class Multiplicar_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Multiplicar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Multiplicar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumeroUno()) {
          optionals.set(0);
        }
        if (struct.isSetNumeroDos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumeroUno()) {
          oprot.writeDouble(struct.numeroUno);
        }
        if (struct.isSetNumeroDos()) {
          oprot.writeDouble(struct.numeroDos);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Multiplicar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.numeroUno = iprot.readDouble();
          struct.setNumeroUnoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numeroDos = iprot.readDouble();
          struct.setNumeroDosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Multiplicar_result implements org.apache.thrift.TBase<Multiplicar_result, Multiplicar_result._Fields>, java.io.Serializable, Cloneable, Comparable<Multiplicar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Multiplicar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Multiplicar_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Multiplicar_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Resultado success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Resultado.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Multiplicar_result.class, metaDataMap);
    }

    public Multiplicar_result() {
    }

    public Multiplicar_result(
      Resultado success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Multiplicar_result(Multiplicar_result other) {
      if (other.isSetSuccess()) {
        this.success = new Resultado(other.success);
      }
    }

    public Multiplicar_result deepCopy() {
      return new Multiplicar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Resultado getSuccess() {
      return this.success;
    }

    public Multiplicar_result setSuccess(@org.apache.thrift.annotation.Nullable Resultado success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Resultado)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Multiplicar_result)
        return this.equals((Multiplicar_result)that);
      return false;
    }

    public boolean equals(Multiplicar_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Multiplicar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Multiplicar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Multiplicar_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiplicar_resultStandardScheme getScheme() {
        return new Multiplicar_resultStandardScheme();
      }
    }

    private static class Multiplicar_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Multiplicar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Multiplicar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Resultado();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Multiplicar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Multiplicar_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiplicar_resultTupleScheme getScheme() {
        return new Multiplicar_resultTupleScheme();
      }
    }

    private static class Multiplicar_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Multiplicar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Multiplicar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Multiplicar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Resultado();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Dividir_args implements org.apache.thrift.TBase<Dividir_args, Dividir_args._Fields>, java.io.Serializable, Cloneable, Comparable<Dividir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dividir_args");

    private static final org.apache.thrift.protocol.TField NUMERO_UNO_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroUno", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField NUMERO_DOS_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroDos", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Dividir_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Dividir_argsTupleSchemeFactory();

    public double numeroUno; // required
    public double numeroDos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMERO_UNO((short)1, "numeroUno"),
      NUMERO_DOS((short)2, "numeroDos");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMERO_UNO
            return NUMERO_UNO;
          case 2: // NUMERO_DOS
            return NUMERO_DOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMEROUNO_ISSET_ID = 0;
    private static final int __NUMERODOS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMERO_UNO, new org.apache.thrift.meta_data.FieldMetaData("numeroUno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NUMERO_DOS, new org.apache.thrift.meta_data.FieldMetaData("numeroDos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dividir_args.class, metaDataMap);
    }

    public Dividir_args() {
    }

    public Dividir_args(
      double numeroUno,
      double numeroDos)
    {
      this();
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Dividir_args(Dividir_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numeroUno = other.numeroUno;
      this.numeroDos = other.numeroDos;
    }

    public Dividir_args deepCopy() {
      return new Dividir_args(this);
    }

    @Override
    public void clear() {
      setNumeroUnoIsSet(false);
      this.numeroUno = 0.0;
      setNumeroDosIsSet(false);
      this.numeroDos = 0.0;
    }

    public double getNumeroUno() {
      return this.numeroUno;
    }

    public Dividir_args setNumeroUno(double numeroUno) {
      this.numeroUno = numeroUno;
      setNumeroUnoIsSet(true);
      return this;
    }

    public void unsetNumeroUno() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    /** Returns true if field numeroUno is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroUno() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMEROUNO_ISSET_ID);
    }

    public void setNumeroUnoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMEROUNO_ISSET_ID, value);
    }

    public double getNumeroDos() {
      return this.numeroDos;
    }

    public Dividir_args setNumeroDos(double numeroDos) {
      this.numeroDos = numeroDos;
      setNumeroDosIsSet(true);
      return this;
    }

    public void unsetNumeroDos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    /** Returns true if field numeroDos is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroDos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMERODOS_ISSET_ID);
    }

    public void setNumeroDosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMERODOS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NUMERO_UNO:
        if (value == null) {
          unsetNumeroUno();
        } else {
          setNumeroUno((java.lang.Double)value);
        }
        break;

      case NUMERO_DOS:
        if (value == null) {
          unsetNumeroDos();
        } else {
          setNumeroDos((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMERO_UNO:
        return getNumeroUno();

      case NUMERO_DOS:
        return getNumeroDos();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NUMERO_UNO:
        return isSetNumeroUno();
      case NUMERO_DOS:
        return isSetNumeroDos();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Dividir_args)
        return this.equals((Dividir_args)that);
      return false;
    }

    public boolean equals(Dividir_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_numeroUno = true;
      boolean that_present_numeroUno = true;
      if (this_present_numeroUno || that_present_numeroUno) {
        if (!(this_present_numeroUno && that_present_numeroUno))
          return false;
        if (this.numeroUno != that.numeroUno)
          return false;
      }

      boolean this_present_numeroDos = true;
      boolean that_present_numeroDos = true;
      if (this_present_numeroDos || that_present_numeroDos) {
        if (!(this_present_numeroDos && that_present_numeroDos))
          return false;
        if (this.numeroDos != that.numeroDos)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroUno);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numeroDos);

      return hashCode;
    }

    @Override
    public int compareTo(Dividir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNumeroUno()).compareTo(other.isSetNumeroUno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroUno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroUno, other.numeroUno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumeroDos()).compareTo(other.isSetNumeroDos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroDos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroDos, other.numeroDos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Dividir_args(");
      boolean first = true;

      sb.append("numeroUno:");
      sb.append(this.numeroUno);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numeroDos:");
      sb.append(this.numeroDos);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Dividir_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dividir_argsStandardScheme getScheme() {
        return new Dividir_argsStandardScheme();
      }
    }

    private static class Dividir_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dividir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dividir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMERO_UNO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroUno = iprot.readDouble();
                struct.setNumeroUnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMERO_DOS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.numeroDos = iprot.readDouble();
                struct.setNumeroDosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Dividir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMERO_UNO_FIELD_DESC);
        oprot.writeDouble(struct.numeroUno);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMERO_DOS_FIELD_DESC);
        oprot.writeDouble(struct.numeroDos);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Dividir_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dividir_argsTupleScheme getScheme() {
        return new Dividir_argsTupleScheme();
      }
    }

    private static class Dividir_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dividir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dividir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumeroUno()) {
          optionals.set(0);
        }
        if (struct.isSetNumeroDos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumeroUno()) {
          oprot.writeDouble(struct.numeroUno);
        }
        if (struct.isSetNumeroDos()) {
          oprot.writeDouble(struct.numeroDos);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Dividir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.numeroUno = iprot.readDouble();
          struct.setNumeroUnoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numeroDos = iprot.readDouble();
          struct.setNumeroDosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Dividir_result implements org.apache.thrift.TBase<Dividir_result, Dividir_result._Fields>, java.io.Serializable, Cloneable, Comparable<Dividir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dividir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Dividir_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Dividir_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Resultado success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Resultado.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dividir_result.class, metaDataMap);
    }

    public Dividir_result() {
    }

    public Dividir_result(
      Resultado success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Dividir_result(Dividir_result other) {
      if (other.isSetSuccess()) {
        this.success = new Resultado(other.success);
      }
    }

    public Dividir_result deepCopy() {
      return new Dividir_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Resultado getSuccess() {
      return this.success;
    }

    public Dividir_result setSuccess(@org.apache.thrift.annotation.Nullable Resultado success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Resultado)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Dividir_result)
        return this.equals((Dividir_result)that);
      return false;
    }

    public boolean equals(Dividir_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Dividir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Dividir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Dividir_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dividir_resultStandardScheme getScheme() {
        return new Dividir_resultStandardScheme();
      }
    }

    private static class Dividir_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dividir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dividir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Resultado();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Dividir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Dividir_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dividir_resultTupleScheme getScheme() {
        return new Dividir_resultTupleScheme();
      }
    }

    private static class Dividir_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dividir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dividir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Dividir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Resultado();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
